name: .NET Desktop

on:
  push:
    branches:  
      - '*'
    tags:
      - '*'
  pull_request:
    branches: [ master ]

jobs:
  test_and_build:
    name: "Test and Build"

    runs-on: windows-latest

    env:
      Solution_Name: ExcelReporter.sln
      Project_Directory: ExcelReporter
      Setup_Directory: SetupProject
      Configuration: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Make BuildConstants
      shell: bash
      run: |
        repo_name=${GITHUB_REPOSITORY/"${GITHUB_REPOSITORY_OWNER}/"/""}
        export build_consts_path="${Project_Directory}/BuildConstants.cs"
        
        echo "namespace ExcelReporter {" >> ${build_consts_path}
        echo "public static class BuildConstants {" >> ${build_consts_path}
        echo "public const string GITHUB_USERNAME = \"${GITHUB_REPOSITORY_OWNER}\";" >> ${build_consts_path}
        echo "public const string GITHUB_REPOSITORY = \"${repo_name}\";" >> ${build_consts_path}
        echo "public const string GITHUB_ASSET_NAME = \"excel-reporter-{0}-release\";" >> ${build_consts_path}
        echo "}}" >> ${build_consts_path}

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
       
    # Setup NuGet
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.6

    # Restore NuGet Packages
    - name: Restore NuGet Packages
      run: nuget restore $env:Solution_Name

    # Build test
    - name: Make a build
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration


  release:
    name: "Release artifact"

    needs: test_and_build

    if: startsWith(github.ref, 'refs/tags/v')

    runs-on: windows-latest

    env:
      Solution_Name: ExcelReporter.sln
      Project_Path: ExcelReporter\ExcelReporter.csproj
      Setup_Path: SetupProject\SetupProject.wixproj
      Project_Directory: ExcelReporter
      Setup_Directory: SetupProject
      ProjectAssemblyInfo: ./ExcelReporter/Properties/AssemblyInfo.cs
      SetupProductFile: ./SetupProject/Product.wxs
      Configuration: Release

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Make BuildConstants
      shell: bash
      run: |
        tag=$(git describe --tags --abbrev=0)
        repo_name=${GITHUB_REPOSITORY/"${GITHUB_REPOSITORY_OWNER}/"/""}
        export build_consts_path="${Project_Directory}/BuildConstants.cs"
        
        echo "namespace ExcelReporter {" >> ${build_consts_path}
        echo "public static class BuildConstants {" >> ${build_consts_path}
        echo "public const string GITHUB_USERNAME = \"${GITHUB_REPOSITORY_OWNER}\";" >> ${build_consts_path}
        echo "public const string GITHUB_REPOSITORY = \"${repo_name}\";" >> ${build_consts_path}
        echo "public const string GITHUB_ASSET_NAME = \"excel-reporter-{0}-release\";" >> ${build_consts_path}
        echo "}}" >> ${build_consts_path}

    - name: Modify version of the assembly
      shell: bash
      run: |
        tag=$(git describe --tags --abbrev=0)
        version=${tag/"v"/""}

        sed -i "s/0.0.0.0/$version/g" ${ProjectAssemblyInfo}
        sed -i "s/0.0.0.0/$version/g" ${SetupProductFile}

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Setup MSBuild.exe
      uses: microsoft/setup-msbuild@v1.0.2
       
    # Setup NuGet
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1.0.6

    # Restore NuGet Packages
    - name: Restore NuGet Packages
      run: nuget restore $env:Solution_Name
    
    # Build the package with MSBuild
    - name: Build package
      run: msbuild $env:Solution_Name /p:Configuration=$env:Configuration
        
    # Decode the base 64 encoded pfx and save the Signing_Certificate
    - name: Decode the pfx and sign artifacts
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
        $certificatePath = Join-Path -Path $env:Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

        signtool /f $certificatePath /p "${{ secrets.PFX_KEY }}" "./${Project_Directory}/bin/${Configuration}/*.exe"
        signtool /f $certificatePath /p "${{ secrets.PFX_KEY }}" "./${SetupProject}/bin/${Configuration}/*.msi"
        
    # Copy artifacts and prepare a zip for upload
    - name: Prepare artifacts
      shell: bash
      run: |
        # Define some variables for things we need
        tag=$(git describe --tags --abbrev=0)
        release_name="excel-reporter-$tag-${Configuration,,}"

        # pack files
        7z a -tzip "${release_name}.zip" "./${Project_Directory}/bin/${Configuration}/*"
        cp "./${Setup_Directory}/bin/${Configuration}/excel_reporter.msi" "${release_name}.msi"

        # show files
        ls excel-reporter*

    # publish
    - name: Publish
      uses: softprops/action-gh-release@v1
      with:
        files: |
          excel-reporter*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Remove the pfx
    - name: Remove the pfx
      run: Remove-Item -path $env:Project_Directory\GitHubActionsWorkflow.pfx